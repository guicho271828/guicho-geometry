

(in-package :guicho-geometry)
(annot:enable-annot-syntax)

;; (defmethod bottom-of ((r 2drectangle))
;;   (slot-value (slot-value r 'v0) 'y))
;; (defmethod left-of ((r 2drectangle))
;;   (slot-value (slot-value r 'v0) 'x))
;; (defmethod right-of ((r 2drectangle))
;;   (slot-value (slot-value r 'v1) 'x))
;; (defmethod top-of ((r 2drectangle))
;;   (slot-value (slot-value r 'v1) 'y))

(define-permutation-methods intersects-p ((r 2drectangle) (s 2dsegment))
  (with-slots (v0 v1) r
    (with-slots (from to) s
      (let ((d (sub-vector to from)))
        (if (= (x-of d) 0.0d0)
            (let* ((sl (/ (x-of d) (y-of d)))
                   (xmin (- (x-of v0) (x-of from)))
                   (xmax (- (x-of v1) (x-of from)))
                   (xself (- (x-of to) (x-of from)))
                   (rx (make-range xmin xmax))
                   (ymin-to-x (* sl (- (y-of v0) (y-of from))))
                   (ymax-to-x (* sl (- (y-of v1) (y-of from))))
                   (ry-to-x (make-range ymin-to-x ymax-to-x)))
              (intersects-p (region-product rx ry-to-x)
                            (make-range 0.0d0 xself)))
            (let* ((sl (/ (y-of d) (x-of d)))
                   (ymin (- (y-of v0) (y-of from)))
                   (ymax (- (y-of v1) (y-of from)))
                   (yself (- (y-of to) (y-of from)))
                   (ry (make-range ymin ymax))
                   (xmin-to-y (* sl (- (x-of v0) (x-of from))))
                   (xmax-to-y (* sl (- (x-of v1) (x-of from))))
                   (rx-to-y (make-range xmin-to-y xmax-to-y)))
              (intersects-p (region-product ry rx-to-y)
                            (make-range 0.0d0 yself))))))))


(define-permutation-methods intersects-p ((r 2drectangle) (s 2dline))
  (with-slots (v0 v1) r
    (with-slots (from to) s
      (let ((d (sub-vector to from)))
        (if (= (x-of d) 0.0d0)
            (let* ((sl (/ (x-of d) (y-of d)))
                   (xmin (- (x-of v0) (x-of from)))
                   (xmax (- (x-of v1) (x-of from)))
                   (rx (make-range xmin xmax))
                   (ymin-to-x (* sl (- (y-of v0) (y-of from))))
                   (ymax-to-x (* sl (- (y-of v1) (y-of from))))
                   (ry-to-x (make-range ymin-to-x ymax-to-x)))
              (intersects-p rx ry-to-x))
            (let* ((sl (/ (y-of d) (x-of d)))
                   (ymin (- (y-of v0) (y-of from)))
                   (ymax (- (y-of v1) (y-of from)))
                   (ry (make-range ymin ymax))
                   (xmin-to-y (* sl (- (x-of v0) (x-of from))))
                   (xmax-to-y (* sl (- (x-of v1) (x-of from))))
                   (rx-to-y (make-range xmin-to-y xmax-to-y)))
              (intersects-p ry rx-to-y)))))))
